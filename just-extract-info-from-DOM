//const lists = document.querySelectorAll('.list-athletes li .text-headline a')

//const athletes = [];
//lists.forEach((item)=>{athletes.push(item.getAttribute('href'))})

const teams = {
	zurich: ['/athletes/29041600', '/athletes/23067415', '/athletes/6228065', '/athletes/15282580', '/athletes/26022333', '/athletes/5257885', '/athletes/20385538', '/athletes/23837170'],
	manila: ['/athletes/18519747', '/athletes/16500041', '/athletes/42704472'],
	edinburgh:['/athletes/16031782', '/athletes/31565097', '/athletes/42912286']
}

const initialValues = {
	manila: {
		distance: 34960,
		elevation: 609,
		time: timeConverterToSeconds('3:39:11')
	},
	zurich: {
		distance: 27280,
		elevation: 531,
		time: timeConverterToSeconds('2:36:57')
	},
	edinburgh: {
		distance: 23200,
		elevation: 167,
		time: timeConverterToSeconds('2:47:27')
	}
}

const athletesRanking = document.querySelectorAll('.leaderboard table tbody tr');
const resultsByAthlete = {};
const ranking = getRanking();

function getRanking(){
	const ranking = Object.assign({}, initialValues);

	athletesRanking.forEach((item)=>{
		const cells = item.querySelectorAll('td');
		const athlete = cells[1].querySelector('a').getAttribute('href');
		const team  = getTeamForUser(athlete);
		const realDistance = parseFloat(cells[2].textContent.trim().replace(',','.')) || 0; // in km
		const distance = realDistance * 1000; // in meters
		cells[2].textContent = realDistance;
		const runs = parseFloat(cells[3].textContent.trim().replace(',','.')) || 0;
		cells[3].textContent = runs;
		const longest = parseFloat(cells[4].textContent.trim().replace(',','.')) || 0;
		cells[4].textContent = longest;

		const avg = cells[5].textContent.replace('/km','').trim();
		const avgPace = timeConverterToSeconds(avg); // in seconds
		const time = realDistance * avgPace;
		cells[5].textContent = secondsTimeConvert(time);

		const elevation = parseFloat(cells[6].textContent.trim().replace('.','')) || 0;
		cells[6].textContent = elevation;

		resultsByAthlete[athlete] = {distance, runs, longest, avgPace, elevation, time};

		addToTeam(team, {distance, elevation, time});
	});

	for (const team in ranking) {
	  ranking[team].distance = ranking[team].distance/1000;
	  ranking[team].time = secondsTimeConvert(ranking[team].time);
	}

	return ranking;

	function getTeamForUser(athlete) {
		for (const team in teams) {
			if(teams[team].indexOf(athlete) > -1){
				return team;
			}
		}
	}

	function addToTeam(team, data){
		if(!ranking[team]){
			ranking[team] = {distance: 0, elevation: 0, time: 0}
		}

		ranking[team].distance += data.distance;
		ranking[team].elevation += data.elevation;
		ranking[team].time += data.time;

	}
}

function secondsTimeConvert(secondsTotal) {
	const hours = secondsTotal / 3600;
	const roundedHours = Math.floor(hours);
	const minutes = (hours - roundedHours) * 60;
	const roundedMinutes = Math.floor(minutes);
	const seconds = (minutes - roundedMinutes) * 60;
	const roundedSeconds = Math.round(seconds);

	return roundedHours + ':' + (roundedMinutes < 10 ? '0' + roundedMinutes : roundedMinutes) + ':' + (roundedSeconds < 10 ? '0' + roundedSeconds : roundedSeconds);
}

function timeConverterToSeconds(time) {
	const splittedTime = time.split(':');
	const partsLength = splittedTime.length;
	let timeInSeconds = 0;

	for(let i = partsLength - 1; i >= 0; i--){
		timeInSeconds += parseInt(splittedTime[i]) * Math.pow(60, partsLength - i - 1);
	}

	return timeInSeconds;
}
